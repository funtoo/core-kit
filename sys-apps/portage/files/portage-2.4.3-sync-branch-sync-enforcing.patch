--- a/pym/portage/repository/config.py	2017-07-06 11:24:58.326206820 +0000
+++ b/pym/portage/repository/config.py	2017-07-06 11:39:26.302510882 +0000
@@ -75,13 +75,13 @@
 	"""Stores config of one repository"""
 
 	__slots__ = ('aliases', 'allow_missing_manifest', 'allow_provide_virtual',
-		'auto_sync', 'cache_formats', 'create_manifest', 'disable_manifest',
-		'eapi', 'eclass_db', 'eclass_locations', 'eclass_overrides',
+		'auto_sync', 'auto_sync_enforcing', 'cache_formats', 'create_manifest',
+		 'disable_manifest', 'eapi', 'eclass_db', 'eclass_locations', 'eclass_overrides',
 		'find_invalid_path_char', 'force', 'format', 'local_config', 'location',
 		'main_repo', 'manifest_hashes', 'masters', 'missing_repo_name',
 		'name', 'portage1_profiles', 'portage1_profiles_compat', 'priority',
-		'profile_formats', 'sign_commit', 'sign_manifest',
-		'sync_depth', 'sync_hooks_only_on_change',
+		'profile_formats', 'sign_commit', 'sign_manifest', 'sync_branch',
+		'sync_depth', 'sync_enforcing', 'sync_hooks_only_on_change',
 		'sync_type', 'sync_umask', 'sync_uri', 'sync_user', 'thin_manifest',
 		'update_changelog', '_eapis_banned', '_eapis_deprecated',
 		'_masters_orig', 'module_specific_options',
@@ -168,6 +168,27 @@
 			auto_sync = auto_sync.strip().lower()
 		self.auto_sync = auto_sync
 
+		#Defines how the sync-branch sync-uri setting should be treated by portage
+		#auto_sync_enforcing = no will only perform a git pull on the
+		#repository when emerge --sync is called. Same thing 
+		#auto_sync_enforcing = yes will perform an extended check to
+		#make sure that both the sync-uri and sync-branch variables are
+		#match the values returned by git at the location folder.
+		#Therefore, changing eithe sync-branch or sync-uri will trigger
+		#a special subroutine to be called to automagically switch to the
+		#correct origin and branch
+		auto_sync_enforcing = repo_opts.get('auto-sync-enforcing')
+		if auto_sync_enforcing is not None:
+			auto_sync_enforcing = auto_sync_enforcing.strip()
+		self.auto_sync_enforcing = auto_sync_enforcing or None
+
+		#allow repos.conf to specify which branch to sync/use
+		sync_branch = repo_opts.get('sync-branch')
+		if sync_branch is not None:
+			sync_branch = sync_branch.strip()
+		self.sync_branch = sync_branch or None
+
+
 		self.sync_depth = repo_opts.get('sync-depth')
 		self.sync_hooks_only_on_change = repo_opts.get(
 			'sync-hooks-only-on-change', 'false').lower() == 'true'
--- a/pym/portage/sync/modules/git/git.py	2017-07-06 11:24:58.330206840 +0000
+++ b/pym/portage/sync/modules/git/git.py	2017-07-06 11:39:26.306510902 +0000
@@ -54,8 +54,13 @@
 			git_cmd_opts += " --quiet"
 		if self.repo.sync_depth is not None:
 			git_cmd_opts += " --depth %d" % self.repo.sync_depth
+			#required with shallow cloning to see all the other branches
+			#with git branch --all
+			git_cmd_opts += " --no-single-branch"
 		if self.repo.module_specific_options.get('sync-git-clone-extra-opts'):
 			git_cmd_opts += " %s" % self.repo.module_specific_options['sync-git-clone-extra-opts']
+		if self.repo.sync_branch is not None:
+			git_cmd_opts += " -b %s" % self.repo.sync_branch
 		git_cmd = "%s clone%s %s ." % (self.bin_command, git_cmd_opts,
 			portage._shell_quote(sync_uri))
 		writemsg_level(git_cmd + "\n")
@@ -70,41 +75,93 @@
 			return (exitcode, False)
 		return (os.EX_OK, True)
 
+	def nuke_repo(self):
+		'''removes the repository'''
+		rm_cmd = "rm -rf"
+		writemsg_level(rm_cmd + " " + self.repo.location + "\n")
+		exitcode = portage.process.spawn_bash("%s %s" % (rm_cmd, 
+				portage._shell_quote(self.repo.location)))
+		if exitcode != os.EX_OK:
+			msg = "!!! Error running rm -rf  %s" % self.repo.location
+			msg += "!!! Please remove %s manually" % self.repo.location
+			self.logger(self.xterm_titles, msg)
+			writemsg_level(msg + "\n", level=logging.ERROR, noiselevel=-1)
+			return (exitcode, False)
+		return (os.EX_OK, True)
 
-	def update(self):
-		''' Update existing git repository, and ignore the syncuri. We are
+	def sync_branch_update(self):
+		'''switches a git repository branch to match the value set by sync-branch
+		if it is unable to switch to the correct branch it will stay at the old
+		branch'''
+		git_cmd = "cd %s && git branch --all" % self.repo.location
+		try:
+			rawbranch = subprocess.check_output(git_cmd, shell=True, \
+				universal_newlines=True)
+		except subprocess.CalledProcessError:
+			return os.EX_NOTFOUND, True
+		for branchline in rawbranch.split("\n"):
+			if branchline == "":
+				continue
+			blist = branchline.strip().split()
+			if blist[0] == "*":
+				if blist[1] == self.repo.sync_branch:
+					return self.simple_update() #we're at the correct branch
+			elif "/" not in blist[0]:
+				if blist[0] == self.repo.sync_branch: #branch exists locally, checkout
+					git_cmd = "cd %s && git checkout %s" % \
+						(self.repo.location, self.repo.sync_branch)
+					try:
+						subprocess.check_output(git_cmd, shell=True)
+					except subprocess.CalledProcessError:
+						return self.simple_update()
+					return self.simple_update()
+			elif not "HEAD" in blist[0] and "/" in blist[0]: #branch exists remotely
+				branchl = blist[0].split("/")
+				if branchl[2] == self.repo.sync_branch: #found the correct value
+					git_cmd = "cd %s && git checkout -b %s" % \
+						(self.repo.location, self.repo.sync_branch)
+					git_cmd += " --track origin/%s" % self.repo.sync_branch
+					try:
+						subprocess.check_output(git_cmd, shell=True)
+					except subprocess.CalledProcessError:
+						return self.simple_update()
+					return self.simple_update()
+		#If we get to this point, it means that the branch doesn't exist on the remote
+		#or the git repository doesn't have info on it, i.e. was cloned incorrectly.
+		#Only handle the first case for now.
+		msg = "!!! cannot find branch: %s\n" % self.repo.sync_branch
+		msg += "!!! Fallback: syncing existing branch\n"
+		self.logger(self.xterm_titles, msg)
+		writemsg_level(msg, level=logging.ERROR, noiselevel=-1)
+		return self.simple_update()
+
+	def sync_uri_check(self):
+		'''checks that self.repo.sync_uri matches the output of git remote -v i.e.
+		checks if git and repos.conf agree on what the sync-uri value is
+		'''
+		git_cmd = "cd %s && git remote -v" % self.repo.location
+		try:
+			rawremote = subprocess.check_output(git_cmd, shell=True, \
+				universal_newlines=True)
+		except subprocess.CalledProcessError:
+			return False
+		for remoteline in rawremote.split("\n"):
+			rlist = remoteline.split()
+			if rlist[0] == "origin" and rlist[2] == "(fetch)":
+				return self.repo.sync_uri == rlist[1]
+
+	def simple_update(self):
+		''' Update existing git repository, and ignore the sync-uri by default. We are
 		going to trust the user and assume that the user is in the branch
 		that he/she wants updated. We'll let the user manage branches with
 		git directly.
 		'''
-
 		git_cmd_opts = ""
-		quiet = self.settings.get("PORTAGE_QUIET") == "1"
-		if quiet:
+		if self.settings.get("PORTAGE_QUIET") == "1":
 			git_cmd_opts += " --quiet"
 		if self.repo.module_specific_options.get('sync-git-pull-extra-opts'):
 			git_cmd_opts += " %s" % self.repo.module_specific_options['sync-git-pull-extra-opts']
-		if self.repo.sync_depth is None:
-			git_cmd = "%s pull%s" % (self.bin_command, git_cmd_opts)
-		else:
-			# Since the default merge strategy typically fails when
-			# the depth is not unlimited, use `git fetch` followed by
-			# `git reset --merge`.
-			try:
-				remote_branch = portage._unicode_decode(
-					subprocess.check_output([self.bin_command, 'rev-parse',
-					'--abbrev-ref', '--symbolic-full-name', '@{upstream}'],
-					cwd=portage._unicode_encode(self.repo.location))).rstrip('\n')
-			except subprocess.CalledProcessError as e:
-				msg = "!!! git rev-parse error in %s" % self.repo.location
-				self.logger(self.xterm_titles, msg)
-				writemsg_level(msg + "\n", level=logging.ERROR, noiselevel=-1)
-				return (e.returncode, False)
-
-			git_cmd_opts += " --depth %d" % self.repo.sync_depth
-			git_cmd = "%s fetch %s%s" % (self.bin_command,
-				remote_branch.partition('/')[0], git_cmd_opts)
-
+		git_cmd = "%s pull%s" % (self.bin_command, git_cmd_opts)
 		writemsg_level(git_cmd + "\n")
 
 		rev_cmd = [self.bin_command, "rev-list", "--max-count=1", "HEAD"]
@@ -114,14 +171,6 @@
 		exitcode = portage.process.spawn_bash("cd %s ; exec %s" % (
 				portage._shell_quote(self.repo.location), git_cmd),
 			**self.spawn_kwargs)
-
-		if exitcode == os.EX_OK and self.repo.sync_depth is not None:
-			reset_cmd = [self.bin_command, 'reset', '--merge', remote_branch]
-			if quiet:
-				reset_cmd.append('--quiet')
-			exitcode = subprocess.call(reset_cmd,
-				cwd=portage._unicode_encode(self.repo.location))
-
 		if exitcode != os.EX_OK:
 			msg = "!!! git pull error in %s" % self.repo.location
 			self.logger(self.xterm_titles, msg)
@@ -132,3 +181,24 @@
 			cwd=portage._unicode_encode(self.repo.location))
 
 		return (os.EX_OK, current_rev != previous_rev)
+
+	def update(self):
+		'''However, if auto-sync-enforcing = yes is set, portage will enforce
+		that the values in the repos.conf files match the ones in the git repositories,
+		and will automagically update the git repositories.
+		'''
+		if self.repo.auto_sync_enforcing == "no" or self.repo.auto_sync_enforcing is None:
+			return self.simple_update()
+		else:
+			#Check sync-uri first. If sync-uri doesn't match, nuke the git repository
+			#and start from scratch. This will automagically set the correct 
+			#sync-branch option
+			if self.repo.sync_uri is not None and self.repo.location is not None:
+				if not self.sync_uri_check():
+					self.nuke_repo()
+					return self.new()
+			#If sync-uri matches, check that sync-branch matches too. Otherwise,
+			#switch to the correct branch. 
+			if self.repo.sync_branch is not None and self.repo.location is not None:
+				return self.sync_branch_update()
+			return self.simple_update()

