# Distributed under the terms of the GNU General Public License v2

EAPI=7

inherit eutils libtool flag-o-matic gnuconfig multilib toolchain-funcs

DESCRIPTION="Tools necessary to build programs"
HOMEPAGE="https://sourceware.org/binutils/"
LICENSE="GPL-3+"
IUSE="64-bit-bfd cet default-gold doc +gold multitarget +nls +plugins +programs static-libs test vanilla"
REQUIRED_USE="default-gold? ( gold )"

SRC_URI="{{artifacts.values()|map(attribute='src_uri')|join(' ')}}"
SLOT=$(ver_cut 1-2)

S="${WORKDIR}/binutils-{{upstream_version}}"

{% if unmasked -%}
KEYWORDS="*"
{% else -%}
KEYWORDS=""
{% endif -%}

RDEPEND="
!<sys-libs/binutils-libs-2.36.1_p3
!<sys-devel/binutils-2.36.1_p3
!sys-devel/binutils:2.36
!sys-devel/binutils:2.32
sys-libs/zlib"
DEPEND="${RDEPEND}"
BDEPEND="
	doc? ( sys-apps/texinfo )
	test? (
		dev-util/dejagnu
		sys-devel/bc
	)
	nls? ( sys-devel/gettext )
	sys-devel/flex
	virtual/yacc
"

RESTRICT="!test? ( test )"

MY_BUILDDIR=${WORKDIR}/build

src_unpack() {
	unpack binutils-{{upstream_version}}.tar.xz
	cd "${WORKDIR}" || die
	unpack {{artifacts['patches'].final_name}}
	mkdir -p "${MY_BUILDDIR}" || die
}

src_prepare() {
	if ! use vanilla; then
		einfo "Applying binutils patchset {{artifacts['patches'].final_name}}"
		eapply "${WORKDIR}/patch"
		einfo "Done."
	fi
	# Apply things from PATCHES and user dirs
	default
	# Run misc portage update scripts
	gnuconfig_update
	elibtoolize --portage --no-uclibc
}

src_configure() {
	strip-linguas -u */po

	# Keep things sane
	strip-flags

	cd "${MY_BUILDDIR}"
	local myconf=()

	if use plugins ; then
		myconf+=( --enable-plugins )
	fi
	# enable gold (installed as ld.gold) and ld's plugin architecture
	if use gold ; then
		myconf+=( --enable-gold )
		if use default-gold; then
			myconf+=( --enable-gold=default )
		fi
	fi

	if use nls ; then
		myconf+=( --without-included-gettext )
	else
		myconf+=( --disable-nls )
	fi

	myconf+=( --with-system-zlib )

	# For bi-arch systems, enable a 64bit bfd.  This matches
	# the bi-arch logic in toolchain.eclass. #446946
	# We used to do it for everyone, but it's slow on 32bit arches. #438522
	case $(tc-arch) in
		ppc|sparc|x86) myconf+=( --enable-64-bit-bfd ) ;;
	esac

	use multitarget && myconf+=( --enable-targets=all --enable-64-bit-bfd )

	myconf+=( --enable-secureplt )

	# mips can't do hash-style=gnu ...
	if [[ $(tc-arch) != mips ]] ; then
		myconf+=( --enable-default-hash-style=gnu )
	fi

    if ! use programs; then
        # We only care about the libs, so disable programs. #528088
		--disable-{binutils,etc,ld,gas,gold,gprof}
		# Disable modules that are in a combined binutils/gdb tree. #490566
		--disable-{gdb,libdecnumber,readline,sim}
	fi

	myconf+=(
		--prefix=/usr
		--host=${CHOST}
		--target=${CHOST}
		--enable-obsolete
		--enable-shared
		--enable-threads
		# Newer versions (>=2.27) offer a configure flag now.
		--enable-relro
		# Newer versions (>=2.24) make this an explicit option. #497268
		--enable-install-libiberty
		# Available from 2.35 on
		--enable-textrel-check=warning
		--disable-werror
		--with-bugurl="{{bugs_url}}"
		--with-pkgversion="{{pkg_blurb}}"
		$(use_enable static-libs static)
		${EXTRA_ECONF}
		# Disable modules that are in a combined binutils/gdb tree. #490566
		--disable-{gdb,libdecnumber,readline,sim}
		# Strip out broken static link flags.
		# https://gcc.gnu.org/PR56750
		--without-stage1-ldflags
		# Change SONAME to avoid conflict across
		# {native,cross}/binutils, binutils-libs. #666100
		--with-extra-soversion-suffix=gentoo-${CATEGORY}-${PN}-$(usex multitarget mt st)
		# We pull in all USE-flags that change ABI in an incompatible
		# way. #666100
		# USE=multitarget change size of global arrays
		# USE=64-bit-bfd changes data structures of exported API
		--with-extra-soversion-suffix=gentoo-${CATEGORY}-${PN}-$(usex multitarget mt st)-$(usex 64-bit-bfd 64 def)


		# avoid automagic dependency on (currently prefix) systems
		# systems with debuginfod library, bug #754753
		--without-debuginfod

		# Allow user to opt into CET for host libraries.
		# Ideally we would like automagic-or-disabled here.
		# But the check does not quite work on i686: bug #760926.
		$(use_enable cet)
		# This only disables building in the zlib subdir.
		# For binutils itself, it'll use the system version. #591516
		--without-zlib
		--with-system-zlib
	)
	echo ./configure "${myconf[@]}"
	"${S}"/configure "${myconf[@]}" || die

	# Prevent makeinfo from running if doc is unset.
	if ! use doc ; then
		sed -i \
			-e '/^MAKEINFO/s:=.*:= true:' \
			Makefile || die
	fi
}

src_compile() {
	cd "${MY_BUILDDIR}"
	emake all

	# only build info pages if the user wants them
	if use doc ; then
		emake info
	fi

	# we nuke the manpages when we're left with junk
	# (like when we bootstrap, no perl -> no manpages)
	find . -name '*.1' -a -size 0 -delete
}

src_test() {
	cd "${MY_BUILDDIR}"
	# bug 637066
	filter-flags -Wall -Wreturn-type
	emake -k check
}

src_install() {
	cd "${MY_BUILDDIR}"
	emake DESTDIR="${D}" install

	# NORMALIZE BINARY LOCATION
	# =========================

	# Binutils installs tools in /usr/bin, and a a subset of these (the build-related ones) in /usr/$CHOST/bin.
	# There are duplications, and hard-links are used.

	# To simplify installation, ensure all these tools are in /usr/$CHOST/bin, and create symlinks in /usr/bin
	# pointing to them at that location. For tool "x", we want to create an "x" symlink as well as a symlink
	# named "$CHOST-x".

	cd ${D}/usr/bin || die
	for x in *; do
		if ! [ -e ${D}/usr/$CHOST/bin/${x} ]; then
			mv ${x} ${D}/usr/$CHOST/bin || die
		fi
	done
	rm -f ${D}/usr/bin/* || die
	cd ${D}/usr/$CHOST/bin || die
	for x in *; do
		ln -s ../$CHOST/bin/$x ${D}/usr/bin/$x || die
		ln -s ../$CHOST/bin/$x ${D}/usr/bin/$CHOST-$x || die
	done

	use static-libs || find "${ED}" -name '*.la' -delete

	# Provide libiberty.h directly.
	dosym libiberty/libiberty.h /usr/include/libiberty.h

#	doins "${libiberty_headers[@]/#/${S}/include/}"

	cd "${S}"
	dodoc README
	docinto bfd
	dodoc bfd/ChangeLog* bfd/README bfd/PORTING bfd/TODO
	docinto binutils
	dodoc binutils/ChangeLog binutils/NEWS binutils/README
	docinto gas
	dodoc gas/ChangeLog* gas/CONTRIBUTORS gas/NEWS gas/README*
	docinto gprof
	dodoc gprof/ChangeLog* gprof/TEST gprof/TODO gprof/bbconv.pl
	docinto ld
	dodoc ld/ChangeLog* ld/README ld/NEWS ld/TODO
	docinto libiberty
	dodoc libiberty/ChangeLog* libiberty/README
	docinto opcodes
	dodoc opcodes/ChangeLog*

	# Remove shared info pages
	#rm -f "${ED}"/${DATAPATH}/info/{dir,configure.info,standards.info}

	# Trim all empty dirs
	find "${ED}" -depth -type d -exec rmdir {} + 2>/dev/null
	if [ -d ${D}/usr/lib ] && [ -d ${D}/usr/lib64 ]; then
		mv ${D}/usr/lib/* ${D}/usr/lib64
		rm -rf ${D}/usr/lib
	fi
}

pkg_preinst() {
	# Wipe out legacy gentoo stuff that may conflict with our merge
	for x in addr2line ar as c++filt dwp elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip; do
		rm -f ${ROOT}/usr/bin/$x
		rm -f ${ROOT}/usr/${CHOST}/bin/$x
	done
	ldscripts_link=${ROOT}/usr/${CHOST}/lib/ldscripts
	if [ -L $ldscripts_link ]; then
		rm -f $ldscripts_link
	else
		echo $ldscripts_link is NOT a symlink
	fi
}
